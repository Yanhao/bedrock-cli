// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceClient interface {
	KvSet(ctx context.Context, in *KvSetRequest, opts ...grpc.CallOption) (*KvSetResponse, error)
	KvGet(ctx context.Context, in *KvGetRequest, opts ...grpc.CallOption) (*KvGetResponse, error)
	KvDelete(ctx context.Context, in *KvDeleteRequest, opts ...grpc.CallOption) (*KvDeleteResponse, error)
	KvScan(ctx context.Context, in *KvScanRequest, opts ...grpc.CallOption) (ProxyService_KvScanClient, error)
	Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) KvSet(ctx context.Context, in *KvSetRequest, opts ...grpc.CallOption) (*KvSetResponse, error) {
	out := new(KvSetResponse)
	err := c.cc.Invoke(ctx, "/bedrock.proxy.ProxyService/KvSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) KvGet(ctx context.Context, in *KvGetRequest, opts ...grpc.CallOption) (*KvGetResponse, error) {
	out := new(KvGetResponse)
	err := c.cc.Invoke(ctx, "/bedrock.proxy.ProxyService/KvGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) KvDelete(ctx context.Context, in *KvDeleteRequest, opts ...grpc.CallOption) (*KvDeleteResponse, error) {
	out := new(KvDeleteResponse)
	err := c.cc.Invoke(ctx, "/bedrock.proxy.ProxyService/KvDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) KvScan(ctx context.Context, in *KvScanRequest, opts ...grpc.CallOption) (ProxyService_KvScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[0], "/bedrock.proxy.ProxyService/KvScan", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServiceKvScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProxyService_KvScanClient interface {
	Recv() (*KvScanResponse, error)
	grpc.ClientStream
}

type proxyServiceKvScanClient struct {
	grpc.ClientStream
}

func (x *proxyServiceKvScanClient) Recv() (*KvScanResponse, error) {
	m := new(KvScanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyServiceClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/bedrock.proxy.ProxyService/Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations must embed UnimplementedProxyServiceServer
// for forward compatibility
type ProxyServiceServer interface {
	KvSet(context.Context, *KvSetRequest) (*KvSetResponse, error)
	KvGet(context.Context, *KvGetRequest) (*KvGetResponse, error)
	KvDelete(context.Context, *KvDeleteRequest) (*KvDeleteResponse, error)
	KvScan(*KvScanRequest, ProxyService_KvScanServer) error
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	mustEmbedUnimplementedProxyServiceServer()
}

// UnimplementedProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (UnimplementedProxyServiceServer) KvSet(context.Context, *KvSetRequest) (*KvSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvSet not implemented")
}
func (UnimplementedProxyServiceServer) KvGet(context.Context, *KvGetRequest) (*KvGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvGet not implemented")
}
func (UnimplementedProxyServiceServer) KvDelete(context.Context, *KvDeleteRequest) (*KvDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvDelete not implemented")
}
func (UnimplementedProxyServiceServer) KvScan(*KvScanRequest, ProxyService_KvScanServer) error {
	return status.Errorf(codes.Unimplemented, "method KvScan not implemented")
}
func (UnimplementedProxyServiceServer) Batch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedProxyServiceServer) mustEmbedUnimplementedProxyServiceServer() {}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_KvSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).KvSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bedrock.proxy.ProxyService/KvSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).KvSet(ctx, req.(*KvSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_KvGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).KvGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bedrock.proxy.ProxyService/KvGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).KvGet(ctx, req.(*KvGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_KvDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).KvDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bedrock.proxy.ProxyService/KvDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).KvDelete(ctx, req.(*KvDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_KvScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KvScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyServiceServer).KvScan(m, &proxyServiceKvScanServer{stream})
}

type ProxyService_KvScanServer interface {
	Send(*KvScanResponse) error
	grpc.ServerStream
}

type proxyServiceKvScanServer struct {
	grpc.ServerStream
}

func (x *proxyServiceKvScanServer) Send(m *KvScanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProxyService_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bedrock.proxy.ProxyService/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).Batch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bedrock.proxy.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KvSet",
			Handler:    _ProxyService_KvSet_Handler,
		},
		{
			MethodName: "KvGet",
			Handler:    _ProxyService_KvGet_Handler,
		},
		{
			MethodName: "KvDelete",
			Handler:    _ProxyService_KvDelete_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _ProxyService_Batch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KvScan",
			Handler:       _ProxyService_KvScan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proxy.proto",
}
